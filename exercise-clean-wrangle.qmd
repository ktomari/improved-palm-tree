---
title: "Exercise: Explore, Clean, and Wrangle Data"
author: Kenji
format: html
---
## About the data

The data, "SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012," can be found on the EDI Data Portal[^1].

## Setup

```{r}
#| include: false
library(tidyverse)

```

## Read and explore data

```{r}
# download data
f1 <- "Time-series of lobster abundance and size.csv"
if(!(f1 %in% list.files("data"))){
  download.file(
    url = "https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.77.8&entityid=f32823fba432f58f66c06b589b7efac6",
    destfile = file.path("data", f1)
  )
}

f2 <- "Time-series of lobster trap buoy counts .csv"
if(!(f2 %in% list.files("data"))){
  download.file(
    url = "https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.77.8&entityid=66dd61c75bda17c23a3bce458c56ed84",
    destfile = file.path("data", f2)
  )
}

# read data in
lobster_abundance <- read_csv(file.path("data", f1))

lobster_traps <- read_csv(file.path("data", f2))
```
### Explore

```{r}
glimpse(lobster_abundance)
```

```{r}
glimpse(lobster_traps)
```




## Exercise 1 

The variable `SIZE_MM` uses `-99999` as the code for missing values (see metadata). This has the potential to cause conflicts with our analyses. Modify the data following these steps:

1. Verify the SIZE_MM variable contains -99999 values using unique().
2. Convert every -99999 value to an NA value using mutate() and na_if(). Look up the help page to see how to use na_if().
3. Check your output data using unique().

```{r}
# verify value
lobster_abundance %>%
  filter(SIZE_MM == -99999) %>%
  nrow()
```
```{r}
# modify na values
lobster_abundance <- lobster_abundance %>%
  # mutate(SIZE_MM = ifelse(SIZE_MM == -99999, as.numeric(NA), SIZE_MM)) %>%
  # alternative approach to above line
  mutate(SIZE_MM = na_if(SIZE_MM, -99999))
```

```{r}
# check
-99999 %in% unique(lobster_abundance$SIZE_MM)
```
### Traps

This is weird too

```{r}
lobster_traps$TRAPS %>% unique()
```

```{r}
lobster_traps <- lobster_traps %>%
  mutate(TRAPS = na_if(TRAPS, -99999))
```


## Exercise 2

Create a subset with the data for the lobsters at Arroyo Quemado (AQUE) that have a carapace length greater than 70 mm.

```{r}
sub <- lobster_abundance %>%
  filter(SITE == "AQUE", SIZE_MM > 70)

```


## Exercise 3

Create a subset with the trapsâ€™ information at all sites where abundance data is not NA. Note that you first have to identify which are these sites.

```{r}
sites <- lobster_abundance %>%
  pull(SITE) %>%
  unique()

traps2 <- lobster_traps %>%
  filter(SITE %in% sites)
```

## Exercise 4

For each data frame, calculate the total count and total traps by site and year (i.e. total traps for every combination of site and year). Store these summary statistics in separate data frames.

```{r}
counts_abundance <- lobster_abundance %>%
  group_by(SITE, YEAR) %>%
  reframe(total_lobsters = sum(COUNT)) %>%
  arrange(desc(YEAR))

counts_traps <- lobster_traps %>%
  group_by(SITE, YEAR) %>%
  reframe(total_traps = sum(TRAPS)) %>%
  arrange(desc(YEAR))

counts_abundance %>% head()
```

```{r}
counts_traps %>% head()
```

```{r}
# fixed weird stuff
counts_traps %>%
  pull(total_traps) %>%
  hist()
```


## Exercise 5

Use one of the join_ functions to get an output data frame with the following columns: SITE, YEAR, total_lobsters, total_traps.

Discuss with your neighbor how the output data frame varies when you do a left_join() or a full_join(). What happens when you do an inner_join()?

```{r}
lobsters_merged_left <- counts_abundance %>%
  left_join(counts_traps, by = c("SITE", "YEAR"))

lobsters_merged_full <- counts_abundance %>%
  full_join(counts_traps, by = c("SITE", "YEAR"))
```

```{r}
# difference in rows
lobsters_merged_full %>% nrow() - lobsters_merged_left %>% nrow() 
```
```{r}
# find missing rows in `lobsters_merged_left`
tmp <- lobsters_merged_left %>%
  mutate(in_left = T)

lobsters_merged_full %>%
  full_join(tmp,  c("SITE", "YEAR","total_lobsters", "total_traps")) %>%
  filter(is.na(in_left))

rm(tmp)
```

## Exercise 6

The sites IVEE and NAPL are marine protected areas (MPAs). Read the documentation about the case_when() function and use it to add this designation to your data set.

HINT: Notice you will have to create a new column with the MPA designation. What function have you previously used to create new columns?

```{r}

```


## References
[^1]: Santa Barbara Coastal LTER, D. Reed, and R. Miller. 2022. SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012 ver 8. Environmental Data Initiative. https://doi.org/10.6073/pasta/25aa371650a671bafad64dd25a39ee18 (Accessed 2023-06-29).